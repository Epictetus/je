#!/usr/bin/env ruby
require 'timeout'

# Set ENV for preloading jemalloc
lib_dir = File.expand_path('../lib/', File.dirname(__FILE__))
if File.exists? (lib_dir + "/jemalloc.so")
  puts "=> Injecting jemalloc..."
  ENV.store("LD_PRELOAD", lib_dir + "/jemalloc.so")
elsif File.exists? (lib_dir + "/jemalloc.bundle")
  puts "=> Injecting jemalloc..."
  ENV.store("DYLD_INSERT_LIBRARIES", lib_dir + "/jemalloc.bundle")
else
  puts "=> Skip injecting jemalloc. Your platform is not supported."
end

# fork(2)
pid = Process.fork

# set signal handlerss
def terminate_gracefully(pid)
  begin
    Process.kill("SIGTERM", pid) rescue Errno::ESRCH
    Timeout.timeout(3) {
      pid, status = Process.wait2
      Kernel.exit (status.exitstatus || 0)
    }
  rescue Timeout::Error
    Process.kill("SIGKILL", pid) rescue Errno::ESRCH
  end
end
trap("INT") { puts "SIGINT received"; terminate_gracefully pid }
trap("TERM") { puts "SIGTERM received"; terminate_gracefully pid }

# exec(2)
if pid.nil? then
  Kernel.exec *ARGV
else
  pid, status = Process.wait2
  Kernel.exit (status.exitstatus || 0)
end
